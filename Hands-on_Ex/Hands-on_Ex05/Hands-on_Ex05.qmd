---
title: "Hands-on Exercise 5"
format: 
  html:
    code-fold: true
    code-summary: "Show code"
execute: 
  eval: true
  echo: true
  warning: false
date: "`r Sys.Date()`"
---

# 1. Learning Objective

In this hands-on exercise, we will be learning the following:

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   provide statistically correct interpretation of GSA statistics.

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;

-   compute Getis-Ord\'s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and

-   to visualise the analysis output by using **tmap** package.

# 2. Getting Started

## 2.1 Context

In spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be \"is there sign of spatial clustering?\". And, if the answer for this question is yes, then our next question will be \"where are these clusters?\"

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of [Hunan Provice, People Republic of China](https://en.wikipedia.org/wiki/Hunan).

## **2.2 Loading R Packages**

The R packages that we will be using today are:

-   sf is use for importing and handling geospatial data in R,

-   tidyverse is mainly use for wrangling attribute data in R,

-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   tmap will be used to prepare cartographic quality chropleth map.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## 2.3 Data Importing and Preparation

### 2.3.1 Dataset

We will be using the following dataset in this hands-on exercise:

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan\'s local development indicators in 2012.

### 2.3.2 Importing Data

We will use *`st_read()`* of **sf** package to import Hunan shapefile into R as a simple feature object.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

Next, we will import *Hunan_2012.csv* into R by using *`read_csv()`* of **readr** package as a R data frame class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### 2.3.3 Relational Join

We will perform a [`left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) from **dplyr** package to update the attribute table of *hunan*\'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe.

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

### 2.3.4 V**isualising Regional Development Indicator**

Before we begin our analysis, it is always good to visualise our geographical data. We will now explore the distribution of GDPPC 2012 by using `qtm()` of **tmap** package to prepare a basemap and a choropleth map.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

# **3. Global Measures of Spatial Autocorrelation**

In this section, we will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

## 3.1 **Computing Contiguity Spatial Weights**

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

The *`poly2nb()`* of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. More specifically, as done in previous hands-on exercise, we will be computing **Queen contiguity weight matrix.**

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

## **3.2 Row-standardised weights matrix**

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=\"W\"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors\' values it has one drawback in that **polygons along the edges of the study area will base their lagged values on fewer polygons** thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we\'ll stick with the style=\"W\" option for simplicity\'s sake but note that other more robust options are available, notably style=\"B\".

```{r}
rswm_q <- nb2listw(wm_q, # must be an object of nb class
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

Note:

-   *style* can take values \"W\", \"B\", \"C\", \"U\", \"minmax\" and \"S\". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

# **4. Global Measures of Spatial Autocorrelation - Moran\'s I**

In this section, we will learn how to perform Moran\'s I statistics testing by using *`moran.test()`* of **spdep**.

## 4.1 **Moran\'s I test**

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

**Statistical Conclusion:**

-   Moran I \> 0 indicates positive spatial autocorrelation (similar values cluster together),

-   Moran I \< 0 indicates negative spatial autocorrelation (dissimilar values cluster together),

-   Moran I = 0 indicates no spatial autocorrelation (random distribution).

1.  In our case, the Moran I statistic is 0.300749970, which is positive, suggesting the **presence of positive spatial autocorrelation.**
2.  The Moran I statistic standard deviate is 4.7351, indicating a significant result.
3.  The p-value is very small (1.095e-06), further supporting the rejection of the null hypothesis that there is **no spatial autocorrelation.**

In summary, based on these results, we can conclude that there is a significant positive spatial autocorrelation in the variable GDPPC, meaning that similar values tend to be clustered together in space.

## **4.2 Computing Monte Carlo Moran\'s I**

We will now be performing permutation test for Moran\'s I statistic by using *`moran.mc()`* of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

In conclusion, based on the Monte Carlo simulation results, you can affirm the presence of **significant positive spatial autocorrelation** in the variable GDPPC. The small p-value supports the rejection of the null hypothesis, indicating that the **observed spatial pattern is unlikely to be due to random chance.**

## **4.3 Visualising Monte Carlo Moran\'s I**

Let us us examine the simulated Moran\'s I test statistics in greater detail by plotting the distribution of the statistical values as a histogram. We will be using *`hist()`* and *`abline()`* of R Graphics.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

# **5. Global Measures of Spatial Autocorrelation - Geary\'s C**

In this section, we will learn how to perform Geary\'s C statistics testing by using appropriate functions of **spdep** package.

## 5.1 **Geary\'s C test**

We can perform the Geary\'s C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.x\`

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

**Statistical Conclusion:**

-   The Geary C statistic ranges from 0 to 2. A value less than 1 suggests positive spatial autocorrelation, while a value greater than 1 suggests negative spatial autocorrelation. In your case, the value is less than 1 (0.6907223), indicating positive spatial autocorrelation.

Based on these results, we can conclude that there is significant positive spatial autocorrelation in the variable GDPPC. The low p-value and the observed Geary C statistic being less than 1 provide evidence against the null hypothesis of no spatial autocorrelation, supporting the presence of a positive spatial pattern in the data.

## 5.2 **Computing Monte Carlo Geary\'s C**

We will now be performing permutation test for Geary\'s C statistic by using *`geary.mc()`* of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

In summary, based on the Monte Carlo simulation results:

-   The observed Geary C statistic is significantly different from what would be expected under the null hypothesis of no spatial autocorrelation.

-   The small p-value indicates strong evidence against the null hypothesis.

-   The alternative hypothesis of positive spatial autocorrelation is supported.

Therefore, we can conclude that there is **significant positive spatial autocorrelation** in the variable GDPPC based on both the observed Geary C statistic and the Monte Carlo simulation results.

## **5.3 Visualising Monte Carlo Moran\'s I**

Next, we will plot a histogram to reveal the distribution of the simulated values.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

# **6. Spatial Correlogram**

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran\'s I or Geary\'s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

## 6.1  **Computing Moran\'s I correlogram**

We will be using *`sp.correlogram()`* of **spdep** package to compute a 6-lag spatial correlogram of GDPPC using the global spatial autocorrelation used in Moran\'s I. The **plot()** of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

Plotting the output alone might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

Overall, the results suggest significant positive spatial autocorrelation in hunan\$GDPPC across various distance lags, supporting the conclusion that neighboring areas tend to exhibit similar economic characteristics.

## 6.2  **Computing Geary\'s C correlogram**

We will be using *`sp.correlogram()`* of **spdep** package to compute a 6-lag spatial correlogram of GDPPC using the global spatial autocorrelation used in Geary\'s C. The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Similar to the previous step, we will print out the analysis report.

```{r}
print(GC_corr)
```

In conclusion, the interpretation is that there is **significant positive spatial autocorrelation** in hunan\$GDPPC, and the significance varies across different distance lags. Areas with similar economic characteristics are spatially clustered, especially at certain lag distances.
