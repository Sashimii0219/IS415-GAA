---
title: "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R"
format: 
  html:
    code-fold: true
    code-summary: "Show code"
execute: 
  eval: true
  echo: true
  warning: false
date: "`r Sys.Date()`"
---

# Overview

Summary of learning

# Getting Started

#### Installing and loading R packages

The R packages that I will be using today are *tmap*, *readr*, *tidyr*, *dplyr* and *sf*.

```{r}
pacman::p_load(tmap, tidyverse, sf)
```

# Importing Data

#### Dataset

The data that we will be using to create the choropleth map are:

-   Master Plan 2014 Subzone Boundary (Web) (Geospatial Data)

<!-- -->

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in CSV (Aspatial Data)

Note: Although it does not contain any coordinates values, but it's **PA** and **SZ** fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.

#### Importing Geospatial Data

Using *`st_read()`* function of sf package to import **MP14_SUBZONE_WEB_PL** shapefile into R.

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

#### Importing Attribute Data

Importing **respopagesextod2011to2020.csv** using *`read_csv()`* function of ***readr*** package into R.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

```{r}
popdata
```

# Data Preparation

#### Data Wrangling

We will be preparing a data table with year 2020 values that includes the following variables:

-   YOUNG: age group 0 to 4 until age group 20 to 24,

<!-- -->

-   ECONOMY ACTIVE: age group 25 to 29 until age group 60 to 64,

<!-- -->

-   AGED: age group 65 and above, - TOTAL: all age group, and

<!-- -->

-   DEPENDENCY: the ratio between young and aged against economy active group

Using the following functions: - *`pivot_wider()`* of [*tidyr*]{.underline} package, and - *`mutate()`*, *`filter()`*, *`group_by()`* and *`select()`* of *dplyr* package

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>% # Only select year 2020 values
  group_by(PA, SZ, AG) %>% # Group data by the following variables
  summarise(`POP` = sum(`Pop`)) %>% # Group Pop value by summing them
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>% # Splitting the values in column AG into their own column, with the value from POP
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) # Calculate %
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

```{r}
popdata2020
```

The values in the **PA** and **SZ** fields consist of both upper and lowercase values. We will standardize them all by converting them all to uppercase.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0) # Filter out areas with no "ECONOMY ACTIVE"
```

Using the *`left_join()`* of *dplyr*, we join the geographical data and the attribute table using planning subzone name (SUBZONE_N of mpsz is = SZ of popdata2020).

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

# Choropleth Mapping Geospatial Data Using tmap

Easiest and quickest to draw a choropleth map using *tmap* is using *`qtm()`*.

-   *`tmap_mode("plot")`* creates a static map, whereas "view" creates an interactive map.

-   fill argument is used to map the attribute.

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

# Creating a choropleth map by using tmap's elements

Disadvantage of *`qtm()`* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map, tmap's drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

The map above consist of the following elements:

#### Base Map

The basic building block of tmap is *`tm_shape()`* followed by one or more layer elemments such as *`tm_fill()`* and *`tm_polygons()`*.

In the code chunk below, *`tm_shape()`* is used to define the input data (i.e mpsz_pop2020) and *`tm_polygons()`* is used to draw the planning subzone polygons.

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to *`tm_polygons()`*.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons("DEPENDENCY")
```

Note:

-   Default interval binning used - "pretty"

-   Default colour scheme - "YlOrRd"

-   Default Missing value colour - Grey

*`tm_polygons()`* can be further broken down into:

-   *`tm_fill()`* - shades the polygon.

-   *`tm_borders()`* - adds the borders of the shapefile onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

4 arguments for *`tm_borders()`*:

-   alpha = transparency number between 0 and 1,

-   col = border colour,

-   lwd = border line width. The default is 1, and

-   lty = border line type. The default is "solid".

# Data classification methods of tmap

Most choropleth maps employ some methods of data classification.

*tmap* provides a total ten data classification methods, namely: *fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.*

To define data classfication method, we will be using the style argument of of *`tm_fill()`* or *`tm_polygons()`*.

#### Plotting choropleth maps with built-in classification methods

The code chunk below shows a quantile data classification that used 5 classes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

#### Plotting choropleth map with custom break

For all the built-in styles, the category breaks are computed internally. This can be overriden using the *`breaks`* argument of the *`tm_fill()`* function. In order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).

It is a good practice to get some descriptive statistics on the variable before setting the break points.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

With reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus *`c(0, 0.60, 0.70, 0.80, 0.90, 1.00)`*.

Plotting the map using the breakpoints:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

# Colour Scheme

#### Using ColourBrewer palette

Assigning a colour to `palette` argument of *`tm_fill()`* changes the colour.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

To reverse the colour shading, add a "-" prefix.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "-Blues") +
  tm_borders(alpha = 0.5)
```

# Map layout

Refers to the combination of all map elements into a cohesive map, e.g. the title, the scale bar, the compass, margins and aspects ratios.

#### Map Legend

In *tmap*, several legend options are provided to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

#### Map Style

Refers to the layout settings.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

#### Cartographic Furniture

Refers to map furniture like compass, scale bar and grid lines.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) + # Compass
  tm_scale_bar(width = 0.15) + # Scale Bar
  tm_grid(lwd = 0.1, alpha = 0.2) + # Grid line
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

To reset to default style, use tmap_style("white").

# Drawing Small Multiple Choropleth Maps

Small multiple maps / facet maps are composed of many maps arrange side-by-side / stacked vertically. It is used to visualise how spatial relationships change with respect to another variable, such as time. This can be done using tmap in 3 ways:

#### By assigning multiple values to at least one of the asthetic arguments

Small multiple choropleth maps are created by defining ncols in tm_fill(), in this case **c("YOUNG", "AGED")**.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

Small multiple choropleth maps can also be created by assigning multiple values to at least one of the aesthetic arguments.

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

#### By defining a group-by variable in tm_facets(), and

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", # here
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

#### By creating multiple stand-alone maps with tmap_arrange().

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2) # here
```

# Mappping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth map, you can also use selection function to map spatial objects meeting the selection criterion.

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
