{
  "hash": "22297ea54e5dcfcf750ad8ec48fce424",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1: Geospatial Data Wrangling with R\"\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show code\"\nexecute: \n  eval: true\n  echo: true\n  freeze: auto\n  warning: false\ndate: \"2024-02-07\"\n---\n\n\n# 1. Learning Objectives\n\nBy the end of this hands-on exercise, we should be able to do the following:\n\n-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,\n\n-   importing geospatial data by using appropriate functions of **sf** package,\n\n-   importing aspatial data by using appropriate function of **readr** package,\n\n-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,\n\n-   assigning or transforming coordinate systems by using using appropriate *sf* functions,\n\n-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,\n\n-   performing geoprocessing tasks by using appropriate functions of **sf** package,\n\n-   performing data wrangling tasks by using appropriate functions of **dplyr** package and\n\n-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.\n\n# 2. Getting Started\n\n## 2.1 Context\n\nData are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data.\n\n## **2.2 Loading R Packages**\n\nIn this section, we will be installing and loading [*tidyverse*]{.underline} and [*sf*]{.underline} packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf)\n```\n:::\n\n\n## 2.3 Data Importing and Preparation\n\nNext, we will be importing the geospatial data files.\n\n### 2.3.1 Importing Master Plan 2014 Subzone Boundary (Web) files:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/jacksontan/Documents/Sashimii0219/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n### 2.3.2 Importing LTA Cycling Path files:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath = st_read(dsn = \"data/geospatial\",\n                      layer = \"CyclingPathGazette\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `CyclingPathGazette' from data source \n  `/Users/jacksontan/Documents/Sashimii0219/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n### 2.3.3 Importing Preschools Location KML file files:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/jacksontan/Documents/Sashimii0219/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n# 3. Checking the content of a simple feature data frame\n\n## 3.1 Working with st_geometry()\n\nThis code displays the basic feature information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n:::\n:::\n\n\n## 3.2 Working with glimpse()\n\nThis code reveals data type of each fields, and a glimpse of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n:::\n:::\n\n\n## 3.3 Working with head()\n\nThis code reveals complete info of a feature object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n```\n:::\n:::\n\n\n# 4. Plotting the Geospatial Data\n\n## 4.1 Simple visualisation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## 4.2 Plotting only the geometry\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 4.3 Plotting using specific attribute\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"PLN_AREA_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n# 5. Working with Projection\n\nTo perform geoprocessing using two geospatial data, we need to ensure that they are projected using similar coordinate system. In this section, we will be projecting a simple feature data frame from one coordinate system to another coordinate system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n:::\n\n\n## 5.1 Assigning EPSG code to a simple feature data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- st_set_crs(mpsz, 3414)\n```\n:::\n\n\nChecking that it is now 3414 (svy21):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz3414)\n```\n:::\n\n\n## 5.2 Transforming the projection of preschool from wgs84 to svy21\n\nWhen we need to reproject one coordinate system to another coordinate system mathematically, we will use *`st_transform()`* instead of *`st_set_crs()`*.\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n```\n:::\n\n\n# 6. Handling Aspatial Data\n\nWhen the data comes in the form of two fields that capture the x and y coordinates of the data points, we call it **Aspatial Data.**\n\nIn this example, we will be using *listings.csv* data downloaded from AirBnb.\n\n## 6.1 Importing the Aspatial Data\n\nImporting the file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n```\n:::\n\n\nExamining the data file to ensure it has been imported correctly. The fields that we will be using is the latitude and longitude column, which corresponds to the x and y coordinate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(listings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 3,457 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    <dbl> <chr>       <dbl> <chr>     <chr>               <chr>            <dbl>\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,447 more rows\n# ℹ 11 more variables: longitude <dbl>, room_type <chr>, price <dbl>,\n#   minimum_nights <dbl>, number_of_reviews <dbl>, last_review <date>,\n#   reviews_per_month <dbl>, calculated_host_listings_count <dbl>,\n#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>\n```\n:::\n:::\n\n\n## 6.2 Creating a simple feature data frame from an aspatial data frame\n\nNow we will create a simple feature data frame from an aspatial data frame using *`st_as_sf()`* of sf packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\nThings to note:\n\n-   **coords** argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\n\n-   **crs** argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to epsg.io.\n\n-   **%\\>%** is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nNow if we use *`glimpse()`* on the newly created simple feature data frame, we can see that the longitude and latitude columns have been dropped, replaced by a new column called geometry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(listings_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,457\nColumns: 17\n$ id                             <dbl> 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           <chr> \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      <chr> \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            <chr> \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  <chr> \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 150, 80, 80, 64, 78, 220, 85, 75, 69, 7…\n$ minimum_nights                 <dbl> 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 12, 131, 17, 5, 81,…\n$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              <dbl> 0.13, 0.16, 0.30, 0.15, 0.11, 0.09, 0.9…\n$ calculated_host_listings_count <dbl> 5, 5, 5, 51, 51, 5, 7, 51, 51, 7, 7, 1,…\n$ availability_365               <dbl> 55, 91, 91, 183, 183, 54, 365, 183, 183…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 3, 0, 0, 1, 2, 0, 0, 0, 0, …\n$ license                        <chr> NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POINT (…\n```\n:::\n:::\n\n\n# 7. Geoprocessing with sf package\n\nIn this section, we will be performing two commonly used geoprocessing functions, namely buffering and point in polygon count from the sf package.\n\n## 7.1 Buffering\n\n***Scenario:** The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.*\n\n**Solution:** First, we will use *`st_buffer()`* of **sf** package to compute the 5-meter buffers around the cycling paths.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n```\n:::\n\n\nFollowed by calculating the area of the buffers using *`st_area()`*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n```\n:::\n\n\nThen we will derive the total land involved using *`sum()`*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(buffer_cycling$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1774367 [m^2]\n```\n:::\n:::\n\n\n## 7.2 Point-in-polygon count\n\n***Scenario:** A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.*\n\n**Solution:** We will be using two operations in one go, using *`st_intersects()`* to identify pre-schools located inside each Planning Subzone, then *`length()`* to calculate number of pre-schools identified in each planning subzone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n```\n:::\n\n\nSummary statistics of the new PreSch Count field using *`summary()`*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz3414$`PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n```\n:::\n:::\n\n\nListing planning subzone with the most number of pre-school using *`top_n()`* of the **dplyr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_n(mpsz3414, 1, `PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n```\n:::\n:::\n\n\nNext, to calculate the density of pre-school by planning subzone, we will first use *`st_area()`* of **sf** package to derive the area of each planning subzone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n```\n:::\n\n\nWe will then use *`mutate()`* of dplyr package to compute the density.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n```\n:::\n\n\n# 8. Exploratory Data Analysis (EDA)\n\nIn this section, we will be making use of appropriate **ggplot2** functions to create functional yet truthful statistical graphs for EDA purposes.\n\n## 8.1 Histogram\n\nThe first graph will be a histogram to reveal the distribution of **PreSch Density.** I will first use *`hist()`* of R Graphics, which is limited in its quality and room for customisation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(mpsz3414$`PreSch Density`)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nWe will then make use of **ggplot2** functions to create a more comprehensive histogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## 8.2 Scatterplot\n\nNext, a scatterplot showing the relationship between **Pre-school Density** and **Pre-school Count.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}