{
  "hash": "4dd8a1ea89792c0ffb1932db17d81ef7",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R\"\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show code\"\nexecute: \n  eval: true\n  echo: true\n  freeze: auto\n  warning: false\ndate: \"2024-02-07\"\n---\n\n\n# 1. Learning Objectives\n\nIn this chapter, we will learn how to plot functional and truthful choropleth maps by using an R package called **tmap**.\n\n# 2. Getting Started\n\n## **2.1 Context**\n\nIn general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.\n\nGeovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human's most powerful information-processing abilities -- those of spatial cognition associated with our eye--brain vision system -- to be directly brought to bear.\n\n## **2.2 Loading R Packages**\n\nThe R packages that we will be using today are *tmap*, *readr*, *tidyr*, *dplyr* and *sf*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, tidyverse, sf)\n```\n:::\n\n\n## 2.3 Data Importing\n\n### 2.3.1 Dataset\n\nThe data that we will be using to create the choropleth map are:\n\n-   Master Plan 2014 Subzone Boundary (Web) (Geospatial Data)\n-   \n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in CSV (Aspatial Data)\n\nNote: Although it does not contain any coordinates values, but it's **PA** and **SZ** fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n### 2.3.2 Importing Geospatial Data\n\nUsing *`st_read()`* function of sf package to import **MP14_SUBZONE_WEB_PL** shapefile into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/jacksontan/Documents/Sashimii0219/IS415-GAA/Hands-on_Ex/Hands-on_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n### 2.3.3 Importing Attribute Data\n\nImporting **respopagesextod2011to2020.csv** using *`read_csv()`* function of ***readr*** package into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 984,656 × 7\n   PA         SZ                     AG     Sex     TOD                Pop  Time\n   <chr>      <chr>                  <chr>  <chr>   <chr>            <dbl> <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 1- and 2-Ro…     0  2011\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 3-Room Flats    10  2011\n 3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 4-Room Flats    30  2011\n 4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 5-Room and …    50  2011\n 5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HUDC Flats (exc…     0  2011\n 6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Landed Properti…     0  2011\n 7 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Condominiums an…    40  2011\n 8 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Others               0  2011\n 9 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 1- and 2-Ro…     0  2011\n10 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 3-Room Flats    10  2011\n# ℹ 984,646 more rows\n```\n:::\n:::\n\n\n## 2.4 Data Preparation\n\n### 2.4.1 Data Wrangling\n\nWe will be preparing a data table with year 2020 values that includes the following variables:\n\n-   YOUNG: age group 0 to 4 until age group 20 to 24,\n-   ECONOMY ACTIVE: age group 25 to 29 until age group 60 to 64,\n-   AGED: age group 65 and above, - TOTAL: all age group, and\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\nUsing the following functions: - *`pivot_wider()`* of [*tidyr*]{.underline} package, and - *`mutate()`*, *`filter()`*, *`group_by()`* and *`select()`* of *dplyr* package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>% # Only select year 2020 values\n  group_by(PA, SZ, AG) %>% # Group data by the following variables\n  summarise(`POP` = sum(`Pop`)) %>% # Group Pop value by summing them\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>% \n  # Splitting the values in column AG into their own column, with the value from POP\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`) # Calculate %\n/`ECONOMY ACTIVE`) %>%\n  dplyr::select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 332 × 7\n   PA         SZ                   YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPENDENCY\n   <chr>      <chr>                <dbl>            <dbl> <dbl> <dbl>      <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Cen…  1440             2610   760  4810      0.843\n 2 Ang Mo Kio Cheng San             6640            15460  6050 28150      0.821\n 3 Ang Mo Kio Chong Boon            6150            13950  6470 26570      0.905\n 4 Ang Mo Kio Kebun Bahru           5540            12090  5120 22750      0.882\n 5 Ang Mo Kio Sembawang Hills       2100             3410  1310  6820      1    \n 6 Ang Mo Kio Shangri-La            3960             8420  3610 15990      0.899\n 7 Ang Mo Kio Tagore                2220             4200  1530  7950      0.893\n 8 Ang Mo Kio Townsville            4690            11450  5100 21240      0.855\n 9 Ang Mo Kio Yio Chu Kang             0                0     0     0    NaN    \n10 Ang Mo Kio Yio Chu Kang East     1220             2300   750  4270      0.857\n# ℹ 322 more rows\n```\n:::\n:::\n\n\nThe values in the **PA** and **SZ** fields consist of both upper and lowercase values. We will standardize them all by converting them all to uppercase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0) # Filter out areas with no \"ECONOMY ACTIVE\"\n```\n:::\n\n\n### 2.4.2 Relational Join\n\nUsing the *`left_join()`* of *dplyr*, we join the geographical data and the attribute table using planning subzone name (SUBZONE_N of mpsz is = SZ of popdata2020).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n```\n:::\n\n\n# 3. Choropleth Mapping Geospatial Data Using tmap\n\n## 3.1 **Plotting a choropleth map quickly by using *qtm()***\n\nEasiest and quickest to draw a choropleth map using *tmap* is using *`qtm()`*.\n\n-   *`tmap_mode(\"plot\")`* creates a static map, whereas \"view\" creates an interactive map.\n\n-   fill argument is used to map the attribute.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## 3.2 Creating a choropleth map by using tmap's elements\n\nDisadvantage of *`qtm()`* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map, tmap's drawing elements should be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThe map above consist of the following elements:\n\n### 3.2.1 Base Map\n\nThe basic building block of tmap is *`tm_shape()`* followed by one or more layer elemments such as *`tm_fill()`* and *`tm_polygons()`*.\n\nIn the code chunk below, *`tm_shape()`* is used to define the input data (i.e mpsz_pop2020) and *`tm_polygons()`* is used to draw the planning subzone polygons.\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to *`tm_polygons()`*.\n\n### 3.2.2 Using tm_polygons()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nNote:\n\n-   Default interval binning used - \"pretty\"\n\n-   Default colour scheme - \"YlOrRd\"\n\n-   Default Missing value colour - Grey\n\n### 3.2.3 Using tm_fill() and tm_borders()\n\n*`tm_polygons()`* can be further broken down into:\n\n-   *`tm_fill()`* - shades the polygon.\n\n-   *`tm_borders()`* - adds the borders of the shapefile onto the choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n4 arguments for *`tm_borders()`*:\n\n-   alpha = transparency number between 0 and 1,\n\n-   col = border colour,\n\n-   lwd = border line width. The default is 1, and\n\n-   lty = border line type. The default is \"solid\".\n\n## 3.3 Data classification methods of tmap\n\nMost choropleth maps employ some methods of data classification.\n\n*tmap* provides a total ten data classification methods, namely: *fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.*\n\nTo define data classfication method, we will be using the style argument of of *`tm_fill()`* or *`tm_polygons()`*.\n\n### 3.3.1 Plotting choropleth maps with built-in classification methods\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### 3.3.2 Plotting choropleth map with custom break\n\nFor all the built-in styles, the category breaks are computed internally. This can be overriden using the *`breaks`* argument of the *`tm_fill()`* function. In order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\n\nIt is a good practice to get some descriptive statistics on the variable before setting the break points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n```\n:::\n:::\n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus *`c(0, 0.60, 0.70, 0.80, 0.90, 1.00)`*.\n\nPlotting the map using the breakpoints:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## 3.4 Colour Scheme\n\n### 3.4.1 Using ColourBrewer palette\n\nAssigning a colour to `palette` argument of *`tm_fill()`* changes the colour.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nTo reverse the colour shading, add a \"-\" prefix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## 3.5 Map layout\n\nRefers to the combination of all map elements into a cohesive map, e.g. the title, the scale bar, the compass, margins and aspects ratios.\n\n### 3.5.1 Map Legend\n\nIn *tmap*, several legend options are provided to change the placement, format and appearance of the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n### 3.5.2 Map Style\n\nRefers to the layout settings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### 3.5.3 Cartographic Furniture\n\nRefers to map furniture like compass, scale bar and grid lines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) + # Compass\n  tm_scale_bar(width = 0.15) + # Scale Bar\n  tm_grid(lwd = 0.1, alpha = 0.2) + # Grid line\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nTo reset to default style, use tmap_style(\"white\").\n\n## 3.6 Drawing Small Multiple Choropleth Maps\n\nSmall multiple maps / facet maps are composed of many maps arrange side-by-side / stacked vertically. It is used to visualise how spatial relationships change with respect to another variable, such as time. This can be done using tmap in 3 ways:\n\n### 3.6.1 By assigning multiple values to at least one of the asthetic arguments\n\nSmall multiple choropleth maps are created by defining ncols in *`tm_fill()`*, in this case **c(\"YOUNG\", \"AGED\")**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nSmall multiple choropleth maps can also be created by assigning multiple values to at least one of the aesthetic arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### 3.6.2 By defining a group-by variable in tm_facets(), and\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", # here\n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### 3.6.3 By creating multiple stand-alone maps with tmap_arrange().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2) # here\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## 3.7 Mappping Spatial Object Meeting a Selection Criterion\n\nInstead of creating small multiple choropleth map, you can also use selection function to map spatial objects meeting the selection criterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}